-- Select Statement 

-- 1. Retrieve all columns from the `products` table. 

select *
from products;


-- 2. Retrieve only the `product_id` and `Product` columns from the `products` table. 

select product_id, product
from products;


-- 3. Retrieve the `Customer name` and `city` from the `customers` table. 

select * 
from customers;

select customer_name, city
from customers;


-- From Statement 
-- 4. Write a query to display all columns from the `orders` table. 

select *
from orders;

-- 5. Display the `order_id`, `order_date`, and `total_amount` from the `orders` table. 

select order_id, order_date, total_amount
from orders;

-- Where Statement 
-- 6. Retrieve all products from the `products` table where the `price` is greater than 500. 

select product, price
from products
where price > 500;

-- 7. Find all customers from the `customers` table who live in "Houston". 

select customer_name, city
from customers
where city = 'Houston';

-- 8. Retrieve all orders from the `orders` table where the `total_amount` is less than 1000. 

select order_id, total_amount
from orders
where total_amount < 1000;

-- 9. Find all products in the `products` table that belong to the "Electronics" category. 

select product, category
from products
where category = 'Electronics';

-- Group By and Order By 
-- 10. Count the number of products in each category from the `products` table and group the results by `Category`. 

select count(product), category
from products
group by category;

-- 11. Retrieve the total number of orders placed by each customer from the `orders` table, grouped by `customer_id`. 

select count(order_id), customer_id
from orders
group by customer_id;

-- 12. Display the average `price` of products in each category, sorted by the average price in descending order. 

select product, avg(price) as Average_Price, category
from products
group by category, product
order by Average_price desc;

-- 13. Find the total `quantity` of each product sold from the `order_items` table, grouped by `product_id` Using Having vs. Where Statement 

select *
from order_items;

select distinct(product_id), sum(quantity)
from order_items
group by product_id;

-- 14. Retrieve categories from the `products` table where the average price is greater than 500 (use `GROUP BY` and `HAVING`). 

select product, avg(price) as Average_Price, category
from products
group by category, product
having Average_Price > 500;

-- 15. Find customers from the `customers` table who are in the "Young" age bracket (use `WHERE`). 

select customer_name, Age_Bracket
from customers
where Age_Bracket = 'Young';

-- 16. Retrieve products from the `products` table where the price is greater than 300 and the category is "Accessories" (use `WHERE`). 

select product, price, category
from products
where price > 300 and category = 'accessories';

-- 17. Display categories from the `products` table that have more than 5 products (use `GROUP BY` and `HAVING`) 

select category, count(product) as result
from products
group by category
having result > 5 ;

-- Limit and Aliasing 

-- 18. Retrieve the top 5 most expensive products from the `products` table (use `LIMIT`). 

select product, price
from products
order by price desc
limit 5;

-- 19. Display the first 10 orders from the `orders` table, sorted by `order_date` in ascending order. 

select order_id, order_date
from orders
order by order_date asc
limit 10;

-- 20. Retrieve the `product_id` and `Product` from the `products` table, and alias them as `ID` and `Product Name`. 

select product_id as ID, product as Product_Name
from products;

-- 21. Find the top 3 customers with the highest `total_amount` spent from the `orders` table. 

select customer_id, sum(total_amount) as Total
from orders
group by customer_id
order by Total desc
limit 3;

-- Joins in MySQL 

-- 22. Retrieve the `order_id`, `order_date`, and `Customer name` by joining the `orders` and `customers` tables.

 select a.customer_id, order_id, order_date, customer_name
 from customers as a
 inner join
 orders as b
 on
 a.Customer_id = b.customer_id;
 
-- 23. Display the `product_id`, `Product`, and `quantity` sold by joining the `products` and `order_items` tables. 

select c.product_id, product, quantity
from products as c
inner join 
order_items as d
on
c.product_id = d.product_id;

-- 24. Find the total revenue generated by each product by joining the `products` and `order_items` tables. 

alter table order_items
add column Total int;

update order_items
set Total = quantity * unit_price;

select distinct(product_id), sum(Total)
from order_items
group by product_id;

select distinct(e.product_id), product, sum(total)
from products as e
inner join 
order_items as f
on 
e.product_id = f.product_id
group by product, product_id;

-- 25. Retrieve the `Customer name`, `order_date`, and `total_amount` by joining the `customers` and `orders` tables. 

select g.customer_id, customer_name, order_date, total_amount
from customers as g
inner join 
orders as h
on 
g.Customer_id = h.customer_id;

-- Unions in MySQL 

-- 26. Retrieve a list of all unique cities from the `customers` table and combine it with a list of all unique categories from the `products` table (use `UNION`).

select distinct(city)
from customers;

select distinct(category)
from products;

select distinct(city)
from customers
union
select distinct(category)
from products;

-- 27. Combine the `product_id` from the `products` table with the `order_id` from the `orders` table (use `UNION`).

select product_id
from products
union
select order_id
from orders;
 
-- Case Statements 

-- 28. Create a new column in the `products` table called `Price Range` that categorizes products as "Low" (price < 300), "Medium" (price between 300 and 700), and "High" (price > 700) using a `CASE` statement. 

alter table products
add column Price_Range varchar(50);

update products
set price_range = 
case
when price < 300 then 'Low'
when price >=300 and price <=700 then 'Medium'
else 'High'
end;
 
-- 29. Use a `CASE` statement to categorize customers in the `customers` table as "Young" (age <= 33),"Working Class" (age between 34 and 49), and "Retired" (age >= 50).

update customers
set myunknowncolumn =
case 
when age <=33 then 'Young'
when age >= 34 and age <= 49 then 'Working Class'
 else 'Retired'
 end;
 
-- 30. Retrieve the `order_id` and a new column called `Order Size` that categorizes orders as "Small" (total_amount < 500), "Medium" (total_amount between 500 and 1000), and "Large" (total_amount > 1000) using a `CASE` statement. 

alter table orders
add column Order_Size varchar(50);

update orders
set Order_Size =
case
when total_amount < 500 then 'Small'
when total_amount >= 500 and total_amount >= 1000 then 'Medium'
else 'large'
end;

-- Intermediate Challenges 

-- 31. Find the top 5 customers who have spent the most money in total (join `customers` and `orders` tables). 

select distinct(i.customer_id), customer_name, sum(total_amount)
from customers as i
inner join
orders as j
on
 i.customer_id = j.customer_id
 group by Customer_id, Customer_Name
  order by sum(total_amount) desc
 limit 5;

-- 32. Retrieve the `Product` name, `Category`, and total revenue generated by each product (join `products` and `order_items` tables). 

select distinct(product), k.product_id, category, total
from products as k
inner join 
order_items as l
on 
k.product_id = l.product_id;

-- 33. Display the `Customer name`, `order_date`, and `total_amount` for orders placed in January 2023 (use `WHERE` with date filtering). 

select m.customer_id, customer_name, order_date, total_amount
from customers as m
inner join 
orders as n
on
m.Customer_id = n.customer_id
where order_date = 'January 2023';

-- 34. Find the average `total_amount` of orders for each customer, and display only those customers whose average order amount is greater than 1000 (use `GROUP BY` and `HAVING`). 

select distinct(o.customer_id), customer_name, avg(total_amount)
from customers as o
inner join orders as p
on
 o.Customer_id = p.customer_id
group by Customer_Name, Customer_id
having avg(total_amount) > 1000;

-- 35. Retrieve the `Customer name`, `Product`, and `quantity` for all orders placed by customers in "New York" (join `customers`, `orders`, and `order_items` tables). 

select q.customer_id, r.order_id, s.product_id, customer_name, product, quantity, city
from customers as q 
inner join orders as r
on
 q.Customer_id = r.customer_id
 inner join order_items as t
 on
 r.order_id = t.order_id
 inner join products as s
 on 
 s.product_id = t.product_id
 where city = 'new york';
 
-- 36. Find customers who placed orders in both January and February 2023.

select u.customer_id, order_id, customer_name, order_date
from customers as u
inner join orders as v
on
u.Customer_id = v.customer_id;
